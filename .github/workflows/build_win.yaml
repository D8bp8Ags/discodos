name: Build Windows release package with pynsist

on:
  push:
    tags:
      - 'v*'
  release:
    types: [created, published, edited, prereleased, released]

jobs:
  build_win:

    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2

    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - name: Install dependencies and pynsist
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pynsist
        sudo apt-get install nsis

    - name: Build package
      run: |
        python -m nsist pynsist.cfg


    - name: Get versions into environment
      run: |
        VERSION=$(python setup.py --version)
        TAG=${GITHUB_REF##*/v}
        echo "setup_version=$VERSION" >> $GITHUB_ENV
        echo "tag_version=$TAG" >> $GITHUB_ENV

    #- name: Compare versions and report
    #  run: |
    #    echo "setup.py version: ${{ env.setup_version }}"
    #    echo "Latest tag version: ${{ env.tag_version }}"
    #    if [[ ${{ env.setup_version }} != ${{ env.tag_version }} ]]; then
    #      echo "Versions are not identical -> quitting workflow."
    #      exit 23
    #    else
    #      echo "OK, versions match -> creating release."
    #      exit 0
    #    fi


    - name: "Get latest release"
      id: last_release
      uses: InsonusK/get-latest-release@v1.0.1
      with:
        myToken: ${{ secrets.GITHUB_TOKEN }}
        exclude_types: ""
        view_top: 1

    - name: "Print result"
      run: |
        echo "id: ${{ steps.last_release.outputs.id }}"
        echo "name: ${{ steps.last_release.outputs.name }}"
        echo "tag_name: ${{ steps.last_release.outputs.tag_name }}"
        echo "created_at: ${{ steps.last_release.outputs.created_atd }}"
        echo "draft: ${{ steps.last_release.outputs.draft }}"
        echo "prerelease: ${{ steps.last_release.outputs.prerelease }}"

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ env.tag_version }}
        release_name: DiscoDOS v${{ env.tag_version }}
        draft: true
        prerelease: true

    - name: Upload Windows package to release assets
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        # This pulls from the CREATE RELEASE step above, referencing it's ID to
        # get its outputs object, which include a `upload_url`. See this blog
        # post for more info:
        # https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/nsis/DiscoDOS_${{ env.tag_version }}.exe
        asset_name: DiscoDOS-${{ env.tag_version }}-Win.exe
        asset_content_type: application/exe
